// <auto-generated />
using System;
using CarSales.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarSales.Web.Data.Migrations
{
    [DbContext(typeof(CarSalesDbContext))]
    [Migration("20230602070920_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Importer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ImporterRating")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Importers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImporterRating = 3,
                            IsActive = true,
                            UserId = "10933c11-ac2a-410d-b60a-8b1d97324975"
                        });
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferorId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "b5fef437-f504-46d2-926d-3158e54e1932"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "926bee86-8bbd-43f6-bc1c-9639d43531a4"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "66ccb670-f0dd-4aa1-a83d-8b2a0003bb50"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "10933c11-ac2a-410d-b60a-8b1d97324975"
                        });
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.RoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleRequests");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ImporterId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImporterId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImporterId = 1,
                            SalePrice = 10000m,
                            SalesmanId = 1,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            OwnerId = 1,
                            SalePrice = 20000m,
                            SalesmanId = 1,
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Salesman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SalesmanRating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Salesmen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            SalesmanRating = 3,
                            UserId = "66ccb670-f0dd-4aa1-a83d-8b2a0003bb50"
                        });
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cbed6d2a-e60a-49df-a6e3-982ccd980393",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f1d2c31-3194-4552-be58-4bccdb74115c",
                            Credits = 50000m,
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJSwlvYUu9ivsVxETX4jgbVpri9xm+TMiY4G7kZ0tTFcstwKXhDHTSQCzSHLsV8JBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4ee7bc5-005f-42a0-aa23-4f1344e35495",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "b5fef437-f504-46d2-926d-3158e54e1932",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e08bf27a-81a9-4c40-b324-749de182bc08",
                            Credits = 50000m,
                            Email = "Owner@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Owner",
                            LastName = "Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@GMAIL.COM",
                            NormalizedUserName = "OWNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAKy0zGEeyij29VrCdM3g9DfkkfT222hvFUdgvkkshiF0MiDCyC6eqksI9d1obYHGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24d531c7-b543-4fb1-b4e8-9e9dddd1627f",
                            TwoFactorEnabled = false,
                            UserName = "Owner"
                        },
                        new
                        {
                            Id = "926bee86-8bbd-43f6-bc1c-9639d43531a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c1d037f-05f5-4532-a5e0-93f2468efcd9",
                            Credits = 50000m,
                            Email = "Owner2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Owner2",
                            LastName = "Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER2@GMAIL.COM",
                            NormalizedUserName = "OWNER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1bc/vm3uyeosPDPqIFFKa/PjX3E5WxyN+NdKKff7G2AKSp2hLtEGTohL8YHnDKFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4a93ef8-aefb-44f9-8ace-c8ad5ff99ef7",
                            TwoFactorEnabled = false,
                            UserName = "Owner2"
                        },
                        new
                        {
                            Id = "66ccb670-f0dd-4aa1-a83d-8b2a0003bb50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d8c8655-a844-401d-b858-c7f6e94c1fdb",
                            Credits = 50000m,
                            Email = "Salesman@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Salesman",
                            LastName = "Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALESMAN@GMAIL.COM",
                            NormalizedUserName = "SALESMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBsSOWCqnhCWvJq1PIFI/rSRt37ZvbCSEGUZ8gT1+NsJjBorcQiTgTlYIXwux2DUtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c248ecc-5dc7-4592-8a63-340bc5374c25",
                            TwoFactorEnabled = false,
                            UserName = "Salesman"
                        },
                        new
                        {
                            Id = "10933c11-ac2a-410d-b60a-8b1d97324975",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47e7f7d4-755a-4a87-82d1-a2ce1710559d",
                            Credits = 50000m,
                            Email = "Importer@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Importer",
                            LastName = "Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "IMPORTER@GMAIL.COM",
                            NormalizedUserName = "IMPORTER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVKzUXFBysnWRnIdfaz7KtgC7310c6DwdXWvnzef0seBUw/QCGrDnhotBxnPnclgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81aa0fa2-0070-45f1-86cb-561a3ef35c20",
                            TwoFactorEnabled = false,
                            UserName = "Importer"
                        });
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImporterId")
                        .HasColumnType("int");

                    b.Property<double>("KilometersDriven")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<double>("TopSpeed")
                        .HasColumnType("float");

                    b.Property<int>("VehicleRating")
                        .HasColumnType("int");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.Property<int>("YearProduced")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImporterId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SalesmanId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "BMW",
                            Description = "Fast car",
                            ImageUrl = "https://media.ed.edmunds-media.com/bmw/m5/2021/oem/2021_bmw_m5_sedan_base_fq_oem_8_815.jpg",
                            KilometersDriven = 0.0,
                            Model = "M5",
                            Price = 9000m,
                            SalesmanId = 1,
                            TopSpeed = 250.0,
                            VehicleRating = 3,
                            VehicleType = 1,
                            YearProduced = 2016
                        },
                        new
                        {
                            Id = 2,
                            Brand = "BMW",
                            Description = "Classic car",
                            ImporterId = 1,
                            KilometersDriven = 0.0,
                            Model = "M3",
                            Price = 5000m,
                            TopSpeed = 240.0,
                            VehicleRating = 3,
                            VehicleType = 1,
                            YearProduced = 2004
                        },
                        new
                        {
                            Id = 3,
                            Brand = "BMW",
                            Description = "Popular car",
                            KilometersDriven = 2000.0,
                            Model = "X5",
                            OwnerId = 1,
                            Price = 18000m,
                            TopSpeed = 243.0,
                            VehicleRating = 4,
                            VehicleType = 1,
                            YearProduced = 2020
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cbed6d2a-e60a-49df-a6e3-982ccd980393",
                            RoleId = "dacb7d40-e742-435c-b131-145300f3c97d"
                        },
                        new
                        {
                            UserId = "b5fef437-f504-46d2-926d-3158e54e1932",
                            RoleId = "bbea2448-c801-43d1-8b05-e3a2c22338d9"
                        },
                        new
                        {
                            UserId = "926bee86-8bbd-43f6-bc1c-9639d43531a4",
                            RoleId = "bbea2448-c801-43d1-8b05-e3a2c22338d9"
                        },
                        new
                        {
                            UserId = "66ccb670-f0dd-4aa1-a83d-8b2a0003bb50",
                            RoleId = "bbea2448-c801-43d1-8b05-e3a2c22338d9"
                        },
                        new
                        {
                            UserId = "10933c11-ac2a-410d-b60a-8b1d97324975",
                            RoleId = "bbea2448-c801-43d1-8b05-e3a2c22338d9"
                        },
                        new
                        {
                            UserId = "66ccb670-f0dd-4aa1-a83d-8b2a0003bb50",
                            RoleId = "c63016c0-e087-43dc-bb9c-a8958a05cbdd"
                        },
                        new
                        {
                            UserId = "10933c11-ac2a-410d-b60a-8b1d97324975",
                            RoleId = "9cbd5531-0c49-4889-95b9-b81fc1e7653a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "dacb7d40-e742-435c-b131-145300f3c97d",
                            ConcurrencyStamp = "dacb7d40-e742-435c-b131-145300f3c97d",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            Description = "Admin"
                        },
                        new
                        {
                            Id = "bbea2448-c801-43d1-8b05-e3a2c22338d9",
                            ConcurrencyStamp = "bbea2448-c801-43d1-8b05-e3a2c22338d9",
                            Name = "Owner",
                            NormalizedName = "OWNER",
                            Description = "Can buy vehicles."
                        },
                        new
                        {
                            Id = "c63016c0-e087-43dc-bb9c-a8958a05cbdd",
                            ConcurrencyStamp = "c63016c0-e087-43dc-bb9c-a8958a05cbdd",
                            Name = "Salesman",
                            NormalizedName = "SALESMAN",
                            Description = "Can buy and sell vehicles."
                        },
                        new
                        {
                            Id = "9cbd5531-0c49-4889-95b9-b81fc1e7653a",
                            ConcurrencyStamp = "9cbd5531-0c49-4889-95b9-b81fc1e7653a",
                            Name = "Importer",
                            NormalizedName = "IMPORTER",
                            Description = "Imports vehicles."
                        });
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Importer", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Offer", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.Owner", "Offeror")
                        .WithMany("Offers")
                        .HasForeignKey("OfferorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSales.Infrastructure.Data.Entities.Salesman", "Salesman")
                        .WithMany("Offers")
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarSales.Infrastructure.Data.Entities.Vehicle", "Vehicle")
                        .WithMany("Offers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offeror");

                    b.Navigation("Salesman");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Owner", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.RoleRequest", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSales.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Sale", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.Importer", "Importer")
                        .WithMany()
                        .HasForeignKey("ImporterId");

                    b.HasOne("CarSales.Infrastructure.Data.Entities.Owner", "Owner")
                        .WithMany("Sales")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarSales.Infrastructure.Data.Entities.Salesman", "Salesman")
                        .WithMany("Sales")
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarSales.Infrastructure.Data.Entities.Vehicle", "Vehicle")
                        .WithMany("Sales")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Importer");

                    b.Navigation("Owner");

                    b.Navigation("Salesman");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Salesman", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Vehicle", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.Importer", "Importer")
                        .WithMany("Vehicles")
                        .HasForeignKey("ImporterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarSales.Infrastructure.Data.Entities.Owner", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarSales.Infrastructure.Data.Entities.Salesman", "Salesman")
                        .WithMany("Vehicles")
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Importer");

                    b.Navigation("Owner");

                    b.Navigation("Salesman");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSales.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarSales.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Importer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Owner", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Sales");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Salesman", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Sales");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarSales.Infrastructure.Data.Entities.Vehicle", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
